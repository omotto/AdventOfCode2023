package main

import (
	"github.com/google/go-cmp/cmp"
	"testing"
)

func TestGetLongestPathTiles(t *testing.T) {
	tcs := []struct {
		desc     string
		input    []string
		expected int
		slopes   bool
	}{
		{
			desc: "expected 94",
			input: []string{
				"#.#####################",
				"#.......#########...###",
				"#######.#########.#.###",
				"###.....#.>.>.###.#.###",
				"###v#####.#v#.###.#.###",
				"###.>...#.#.#.....#...#",
				"###v###.#.#.#########.#",
				"###...#.#.#.......#...#",
				"#####.#.#.#######.#.###",
				"#.....#.#.#.......#...#",
				"#.#####.#.#.#########v#",
				"#.#...#...#...###...>.#",
				"#.#.#v#######v###.###v#",
				"#...#.>.#...>.>.#.###.#",
				"#####v#.#.###v#.#.###.#",
				"#.....#...#...#.#.#...#",
				"#.#########.###.#.#.###",
				"#...###...#...#...#.###",
				"###.###.#.###v#####v###",
				"#...#...#.#.>.>.#.>.###",
				"#.###.###.#.###.#.#v###",
				"#.....###...###...#...#",
				"#####################.#",
			},
			slopes:   true,
			expected: 94,
		},
		{
			desc: "expected 154",
			input: []string{
				"#.#####################",
				"#.......#########...###",
				"#######.#########.#.###",
				"###.....#.>.>.###.#.###",
				"###v#####.#v#.###.#.###",
				"###.>...#.#.#.....#...#",
				"###v###.#.#.#########.#",
				"###...#.#.#.......#...#",
				"#####.#.#.#######.#.###",
				"#.....#.#.#.......#...#",
				"#.#####.#.#.#########v#",
				"#.#...#...#...###...>.#",
				"#.#.#v#######v###.###v#",
				"#...#.>.#...>.>.#.###.#",
				"#####v#.#.###v#.#.###.#",
				"#.....#...#...#.#.#...#",
				"#.#########.###.#.#.###",
				"#...###...#...#...#.###",
				"###.###.#.###v#####v###",
				"#...#...#.#.>.>.#.>.###",
				"#.###.###.#.###.#.#v###",
				"#.....###...###...#...#",
				"#####################.#",
			},
			slopes:   false,
			expected: 154,
		},
	}
	for _, tc := range tcs {
		t.Run(tc.desc, func(t *testing.T) {
			v, _ := getLongestPathTiles(tc.input, tc.slopes)
			if diff := cmp.Diff(tc.expected, v); diff != "" {
				t.Errorf("value has diff %s", diff)
			}
		})
	}
}

func TestGetLongestPathTiles2(t *testing.T) {
	tcs := []struct {
		desc     string
		input    []string
		expected int
	}{
		{
			desc: "expected 154",
			input: []string{
				"#.#####################",
				"#.......#########...###",
				"#######.#########.#.###",
				"###.....#.>.>.###.#.###",
				"###v#####.#v#.###.#.###",
				"###.>...#.#.#.....#...#",
				"###v###.#.#.#########.#",
				"###...#.#.#.......#...#",
				"#####.#.#.#######.#.###",
				"#.....#.#.#.......#...#",
				"#.#####.#.#.#########v#",
				"#.#...#...#...###...>.#",
				"#.#.#v#######v###.###v#",
				"#...#.>.#...>.>.#.###.#",
				"#####v#.#.###v#.#.###.#",
				"#.....#...#...#.#.#...#",
				"#.#########.###.#.#.###",
				"#...###...#...#...#.###",
				"###.###.#.###v#####v###",
				"#...#...#.#.>.>.#.>.###",
				"#.###.###.#.###.#.#v###",
				"#.....###...###...#...#",
				"#####################.#",
			},
			expected: 154,
		},
	}
	for _, tc := range tcs {
		t.Run(tc.desc, func(t *testing.T) {
			v, _ := getLongestPathTiles2(tc.input)
			if diff := cmp.Diff(tc.expected, v); diff != "" {
				t.Errorf("value has diff %s", diff)
			}
		})
	}
}

func TestGetLongestPathTiles3(t *testing.T) {
	tcs := []struct {
		desc     string
		input    []string
		expected int
	}{
		{
			desc: "expected 154",
			input: []string{
				"#.#####################",
				"#.......#########...###",
				"#######.#########.#.###",
				"###.....#.>.>.###.#.###",
				"###v#####.#v#.###.#.###",
				"###.>...#.#.#.....#...#",
				"###v###.#.#.#########.#",
				"###...#.#.#.......#...#",
				"#####.#.#.#######.#.###",
				"#.....#.#.#.......#...#",
				"#.#####.#.#.#########v#",
				"#.#...#...#...###...>.#",
				"#.#.#v#######v###.###v#",
				"#...#.>.#...>.>.#.###.#",
				"#####v#.#.###v#.#.###.#",
				"#.....#...#...#.#.#...#",
				"#.#########.###.#.#.###",
				"#...###...#...#...#.###",
				"###.###.#.###v#####v###",
				"#...#...#.#.>.>.#.>.###",
				"#.###.###.#.###.#.#v###",
				"#.....###...###...#...#",
				"#####################.#",
			},
			expected: 154,
		},
	}
	for _, tc := range tcs {
		t.Run(tc.desc, func(t *testing.T) {
			v, _ := getLongestPathTiles3(tc.input)
			if diff := cmp.Diff(tc.expected, v); diff != "" {
				t.Errorf("value has diff %s", diff)
			}
		})
	}
}
